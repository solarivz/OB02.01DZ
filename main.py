"""Задание

Разработай систему управления учетными записями пользователей для небольшой компании.
Компания разделяет сотрудников на обычных работников и администраторов. У каждого
сотрудника есть уникальный идентификатор (ID), имя и уровень доступа. Администраторы,
помимо обычных данных пользователей, имеют дополнительный уровень доступа и могут
добавлять или удалять пользователя из системы.

Требования:

1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя
и уровень доступа ('user' для обычных сотрудников).

2.Класс `Admin`: Этот класс должен наследоваться от класса `User`. Добавь
дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
Класс должен также содержать методы `add_user` и `remove_user`, которые позволяют
добавлять и удалять пользователей из списка (представь, что это просто список
экземпляров `User`).

3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа
и модификации снаружи. Предоставь доступ к необходимым атрибутам через методы
(например, get и set методы).
"""
# объявление класса User, который представляет пользователей системы
class User:
    # метод __init__, который инициализирует объект класса User при его
    # создании. Он принимает аргументы user_id (идентификатор пользователя)
    # и name (имя пользователя).
    def __init__(self, user_id, name):
        # инициализация атрибутов обьекта идентификатор и имя пользователя
        #
        self.__user_id = user_id
        self.__name = name
        self.__access_level = 'user' # устанавливается по умолчанию как 'user'

    def get_user_id(self):  # метод возвращает идентификатор пользователя
        return self.__user_id

    def get_name(self): # метод  возвращает имя пользователя
        return self.__name

    def get_access_level(self): # метод  возвращает уровень доступа пользователя
        return self.__access_level


